# -*- coding: utf-8 -*-
"""BlockJson3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13toQ53_YPO2Ep7EcMhUFgoJYbRJas2mM
"""

#### From James' Code https://github.com/aivaslab/viswork-explore/blob/main/json_explorer.ipynb

from google.colab import drive
drive.mount('/content/drive')

import json
### pip install <package>

file_path = "/content/drive/MyDrive/Colab Notebooks/Tensorboard/task1_April12.json"

with open(file_path, "r") as f:
  data = json.load(f)

data.keys()

data_body = json.loads(data['body'])
data_body.keys()

"""Events has 3 keys: timestamp, type, and body. Calculate frequency of different types of events in the file"""

event_types = dict()

for event in data_body['events']:
    if event['type'] in event_types:
        ## increse counter if the event already appeared before
        event_types[event['type']] += 1
    else:
        event_types[event['type']] = 1


## view eventtypes and frquency
event_types

"""**Plot**   We will create a bar plot of differnt event types and their frequencies"""

##### event_types is a dictionary. A dictionary has keys and values. For example, keys are BlockDropEvent', and corresponding value is 3

import numpy as np
### for plotting
import matplotlib.pyplot as plt

# creating the dataset X and Y axis. We will create lists to contain X axis values and Y axis values
x_axis_events = list(event_types.keys())
y_axis_eventcount = list(event_types.values())

fig = plt.figure(figsize = (10, 5))

# creating the bar plot. 
plt.bar(x_axis_events, y_axis_eventcount)
##To plot horizontal, use plt.barh 

## X axis label
plt.xlabel("Event types")
## y axis label
plt.ylabel("Event Frequencies")
## plot title
plt.title("Event Frequencies in the Data")
### show the plot
plt.show()

"""Move X ticks for better visibility. Add plt.xticks(rotation='vertical') and run code again"""

# creating the bar plot. 
plt.bar(x_axis_events, y_axis_eventcount)
##To plot horizontal, use plt.barh 

## X axis label
plt.xticks(rotation='vertical')
plt.xlabel("Event types")
## y axis label
plt.ylabel("Event Frequencies")
## plot title
plt.title("Event Frequencies in the Data")
### show the plot
plt.show()

"""Now try a horizontal bar plot. We will have Event types on the  Y axis and Event frequencies on the X axis. We will use plt.barh and cahnge x and Y axis label texts."""

# creating the bar plot. Notice, we are using plt.barh
plt.barh(x_axis_events, y_axis_eventcount)
##To plot horizontal, use plt.barh 

## X axis label ---> previous Y axis label
#plt.xticks(rotation='vertical')
plt.xlabel("Event Frequencies")
## y axis label --> previous X axis label
plt.ylabel("Event Types")
## plot title
plt.title("Event Frequencies in the Data")
### show the plot
plt.show()

print("Unique event count ", len(event_types))

print(len(data_body['events']))

task_id = data['taskId']
created_timestamp = data['createdTimestamp']
submission_id = data['submissionId']
_body = json.loads(data['body'])
run_guid = _body['runGuid']

created_timestamp

import datetime
## package to manipulate date and time

### store lates timestamp
latest_timestamp = 0


for event in data_body['events']:
    #if event['type'] in ['ShowRegion']:
        #structure = json.loads(event['body'])
    print("Event type =",event['type'], ", Event =", event['body'], ", timestamp =", round(event['timestamp'], 2))
    latest_timestamp = round(event['timestamp'], 2)

latest_timestamp

## convert created_timestamp string to date_time object
created_datetime_object = datetime.datetime.strptime(created_timestamp, '%Y-%m-%dT%H:%M:%S.%fZ')
##

latest_datetime = created_datetime_object + datetime.timedelta(seconds=latest_timestamp)

latest_datetime